templates:
  - id: stack
    info: "Full stack with React web app and Python API"
    run:
      - kong
      - curity
      - postgres
      - api
      - spa

modules:
  - id: boilerplate
    module: polytope/container
    params:
      - id: target-path
        info: Path relative to the repo root where the module's code will be created
        type: str
      - id: source-path
        info: Git repository URL to clone boilerplate code from
        type: str
    args:
      image: alpine:latest
      cmd:
        - sh
        - -c
        - |
          set -eu
          echo "Installing git..."
          apk add --no-cache git
          
          echo "Creating boilerplate code from $SOURCE_PATH at $TARGET_PATH..."
          
          # Check target path
          if [ -d "$TARGET_PATH" ]; then
            if [ "$(ls -A "$TARGET_PATH")" ]; then
              echo "ERROR: The target path '$TARGET_PATH' already exists and is not empty. Please choose a different path."
              exit 1
            fi
          else
            mkdir -p "$TARGET_PATH"
          fi
          
          # Clone repository to temporary location
          echo "Cloning boilerplate from $SOURCE_PATH..."
          TEMP_DIR="/tmp/boilerplate-$$"
          git clone --depth 1 "$SOURCE_PATH" "$TEMP_DIR"
          
          # Copy all contents first
          echo "Copying boilerplate files to $TARGET_PATH..."
          cp -r "$TEMP_DIR"/* "$TARGET_PATH/" 2>/dev/null || true
          cp -r "$TEMP_DIR"/.[!.]* "$TARGET_PATH/" 2>/dev/null || true
          
          # Remove .git directory and all git-related files
          echo "Removing .git directory and git-related files..."
          rm -rf "$TARGET_PATH"/.git
          rm -f "$TARGET_PATH"/.gitignore
          rm -f "$TARGET_PATH"/.gitattributes
          rm -f "$TARGET_PATH"/.gitmodules
          rm -f "$TARGET_PATH"/.gitkeep
          
          # Remove README and LICENSE files from root directory if they exist
          echo "Removing README and LICENSE files from root directory..."
          rm -f "$TARGET_PATH"/README*
          rm -f "$TARGET_PATH"/LICENSE*
          rm -f "$TARGET_PATH"/readme*
          rm -f "$TARGET_PATH"/license*
          
          # Clean up
          rm -rf "$TEMP_DIR"
          
          echo "Done! Boilerplate code created at $TARGET_PATH"
      workdir: /repo
      mounts:
        - path: /repo
          source:
            type: host
            path: ''
      env:
        - name: TARGET_PATH
          value: pt.param target-path
        - name: SOURCE_PATH
          value: pt.param source-path

  - id: add-package-python
    info: Adds uv packages in a Python module
    module: polytope/container
    params:
      - id: packages
        info: Comma-separated list of packages to add
        type: str
      - id: module-code-path
        info: Relative path of the module code's root directory
        type: str
    args:
      image: python:3.13-slim
      cmd:
        - sh
        - -c
        - |
          set -eu
          echo "Installing uv..."
          pip install uv
          echo "Adding python packages: $PACKAGES"
          cd "/module-code"
          if [ ! -f "pyproject.toml" ]; then
            echo "ERROR: No pyproject.toml found"
            exit 1
          fi
          # Add packages to pyproject.toml
          uv add $PACKAGES
          echo "Done!"
      mounts:
        - path: /module-code
          source:
            type: host
            path: pt.param module-code-path
      env:
        - name: PACKAGES
          value: pt.param packages

  - id: api
    info: "Python API server (blueprint: python-api)"
    module: polytope/python
    args:
      image: python:3.13-slim
      code: { type: host, path: ./modules/api }
      cmd: bin/run
      services:
        - id: api
          ports:
            - port: 4000
              protocol: http
              expose-as: pt.value api-port
      env:
        - { name: PORT, value: pt.value api-port }

  - id: web-app
    info: "React Web App (blueprint: react-web-app)"
    params:
      - id: cmd
        type: [default, str, ./bin/run]
    module: polytope/node
    args:
      id: web-app
      image: oven/bun:slim
      code: { type: host, path: ./modules/web-app }
      cmd: pt.param cmd
      env:
        - { name: PORT, value: pt.value web-app-port }
        - { name: API_HOST, value: pt.value api-host }
      restart:
        policy: always
      services:
        - id: web-app
          ports: [{protocol: http, port: pt.value web-app-port, expose-as: pt.value web-app-port}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, id: dependency-cache }}
        - { path: /root/.bun/, source: { type: volume, id: bun-cache }}
        - { path: /app/node_modules/, source: { type: volume, id: node-modules }}

  - id: spa
    info: "React Web App (blueprint: react-web-app)"
    params:
      - id: cmd
        type: [default, str, ./bin/run]
    module: polytope/node
    args:
      id: web-app
      image: oven/bun:slim
      code: { type: host, path: ./modules/spa }
      cmd: pt.param cmd
      env:
        - { name: PORT, value: pt.value web-app-port }
        - { name: API_HOST, value: pt.value api-host }
      restart:
        policy: always
      services:
        - id: web-app
          ports: [{protocol: http, port: pt.value web-app-port, expose-as: pt.value web-app-port}]
      mounts:
        - { path: /root/.cache/, source: { type: volume, id: dependency-cache }}
        - { path: /root/.bun/, source: { type: volume, id: bun-cache }}
        - { path: /app/node_modules/, source: { type: volume, id: node-modules }}

  - id: curity
    info: "Runs the Curity Identity Server (blueprint: curity-identity-provider)"
    module: polytope/curity
    args:
      image: curity.azurecr.io/curity/idsvr:10.4.0
      config-file: { type: host, path: ./modules/curity/config.xml }
      restart: { policy: always }
      password: password
      log-level: DEBUG  # NOTE: uncomment when developing against curity
      env:
      
        - { name: ADMIN, value: true }
        - { name: CURITY_BASE_URL, value: pt.value curity-base-url }
        - { name: WEB_APP_URL, value: pt.value web-app-url }
        - { name: AGENT_BASE_URL, value: pt.value curity-agent-base-url }
      mounts:
        - { path: /opt/idsvr/usr/bin/post-commit-cli-scripts, source: { type: host, path: ./modules/curity/post-commit-cli-scripts }}
        - { path: /opt/idsvr/etc/init/curity-users.xml, source: { type: host, path: ./modules/curity/users.xml }}

  - id: postgres
    info: "PostgreSQL database server (blueprint: postgres)"
    module: polytope/postgres
    args:
      image: postgres:16.2
      data-volume: { id: postgres-data, type: volume, scope: project }
      env:
        - { name: POSTGRES_DB, value: pt.value postgres-database }
        - { name: POSTGRES_USER, value: pt.secret postgres-username }
        - { name: POSTGRES_PASSWORD, value: pt.secret postgres-password }
        - { name: POSTGRES_HOST_AUTH_METHOD, value: scram-sha-256 }
      restart: { policy: on-failure }
      service-id: postgres
      scripts:
        - { type: host, path: ./modules/curity/db.sql }

  - id: kong
    info: "Runs the Kong API Gateway (blueprint: kong-api-gateway)"
    module: polytope/kong!simple
    args:
      image: gcr.io/arched-inkwell-420116/kong-oauth-proxy
      config-file: { type: host, path: ./modules/kong/kong.yml }
      autoreload: true
      env:
        - { name: KONG_ADMIN_LISTEN, value: "0.0.0.0:8001" }
        - { name: KONG_PROXY_LISTEN, value: "0.0.0.0:8000" }
        - { name: KONG_NGINX_HTTP_LUA_SHARED_DICT, value: 'phantom-token 10m' }
        - { name: KONG_PLUGINS, value: 'bundled,oauth-proxy,phantom-token' }
      services:
        - { id: kong, ports: [{ port: 8000, protocol: http, expose-as: pt.value kong-port }] }
        - { id: kong-admin, ports: [{ port: 8001, protocol: http, expose-as: pt.value kong-admin-port }] }
      plugins:
        - { name: phantom-token, package: kong-phantom-token, version: 2.0.0 }
